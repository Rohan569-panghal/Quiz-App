{"ast":null,"code":"var _jsxFileName = \"/home/rohan/Downloads/Linux Quiz App/Quiz-App/src/components/Main/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDarkMode } from '../DarkModeContext/DarkModeProvider';\nimport { Container, Segment, Item, Dropdown, Divider, Button, Message } from 'semantic-ui-react';\nimport mindImg from '../../images/mind.svg';\nimport { CATEGORIES, NUM_OF_QUESTIONS, DIFFICULTY, QUESTIONS_TYPE, COUNTDOWN_TIME } from '../../constants';\nimport { shuffle } from '../../utils';\nimport Offline from '../Offline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = ({\n  startQuiz\n}) => {\n  _s();\n  const {\n    darkMode\n  } = useDarkMode();\n  const [category, setCategory] = useState('0');\n  const [numOfQuestions, setNumOfQuestions] = useState(10);\n  const [difficulty, setDifficulty] = useState('easy');\n  const [questionsType, setQuestionsType] = useState('0');\n  const [countdownTime, setCountdownTime] = useState({\n    hours: 0,\n    minutes: 120,\n    seconds: 0\n  });\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [offline, setOffline] = useState(false);\n  const style = {\n    backgroundColor: darkMode ? '#1e1e1e' : 'white',\n    color: darkMode ? '#f5f5f5' : 'black',\n    padding: '8px',\n    transition: 'all 0.3s ease-in-out'\n  };\n  const handleTimeChange = (e, {\n    name,\n    value\n  }) => {\n    setCountdownTime({\n      ...countdownTime,\n      [name]: value\n    });\n  };\n  let allFieldsSelected = false;\n  if (category && numOfQuestions && difficulty && questionsType && (countdownTime.hours || countdownTime.minutes || countdownTime.seconds)) {\n    allFieldsSelected = true;\n  }\n  const fetchData = () => {\n    setProcessing(true);\n    if (error) setError(null);\n    const API = `http://127.0.0.5:5000/api/questions?difficulty=${difficulty}&type=${questionsType}&limit=${numOfQuestions}`;\n    // `https://opentdb.com/api.php?amount=${numOfQuestions}&category=${category}&difficulty=${difficulty}&type=${questionsType}`\n    // https://opentdb.com/api.php?amount=5&category=0&difficulty=easy&type=0\n    // alert(API);\n    console.log(API);\n    fetch(API).then(respone => respone.json()).then(data => setTimeout(() => {\n      data = {\n        \"response_code\": 0\n      };\n      const max_questions = `${numOfQuestions}`;\n      var difficulty_level = `${difficulty}`;\n      if (difficulty_level != '0') {\n        data.results = data.results.filter(question => question.difficulty === difficulty_level);\n      }\n      var ques_type = `${questionsType}`;\n      if (ques_type != '0') {\n        data.results = data.results.filter(question => question.type === ques_type);\n      }\n      data.results = data.results.sort(() => Math.random() - 0.5).slice(0, max_questions);\n      // data.results = data.results.filter(question => question.difficulty === difficulty_level).sort(() => Math.random() - 0.5).slice(0, max_questions);\n\n      // console.log(data.results);\n\n      // console.log(data[\"results\"]);\n      const {\n        response_code,\n        results\n      } = data;\n      if (response_code === 1) {\n        const message = /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The API doesn't have enough questions for your query. (Ex. Asking for 10 Questions in a Category that only has 10.)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this), \"Please change the \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"No. of Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 35\n          }, this), \",\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Difficulty Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), \", or\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Type of Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this);\n        setProcessing(false);\n        setError({\n          message\n        });\n        return;\n      }\n      results.forEach(element => {\n        element.options = shuffle([element.correct_answer, ...element.incorrect_answers]);\n      });\n      setProcessing(false);\n      startQuiz(results, countdownTime.hours + countdownTime.minutes + countdownTime.seconds);\n    }, 1000)).catch(error => setTimeout(() => {\n      if (!navigator.onLine) {\n        setOffline(true);\n      } else {\n        setProcessing(false);\n        setError(error);\n      }\n    }, 1000));\n  };\n  if (offline) return /*#__PURE__*/_jsxDEV(Offline, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: style,\n    children: [/*#__PURE__*/_jsxDEV(Segment, {\n      style: style,\n      children: /*#__PURE__*/_jsxDEV(Item.Group, {\n        divided: true,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          children: [/*#__PURE__*/_jsxDEV(Item.Image, {\n            src: mindImg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Item.Content, {\n            children: [/*#__PURE__*/_jsxDEV(Item.Header, {\n              style: style,\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"The Ultimate Linux Quiz\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n              error: true,\n              onDismiss: () => setError(null),\n              children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                children: \"Error!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this), error.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Item.Meta, {\n              style: style,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Click on play now to start quiz.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"How many questions do you want in your quiz?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                style: style,\n                fluid: true,\n                selection: true,\n                name: \"numOfQ\",\n                placeholder: \"Select No. of Questions\",\n                header: \"Select No. of Questions\",\n                options: NUM_OF_QUESTIONS,\n                value: numOfQuestions,\n                onChange: (e, {\n                  value\n                }) => setNumOfQuestions(value),\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"How difficult do you want your quiz to be?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                style: style,\n                fluid: true,\n                selection: true,\n                name: \"difficulty\",\n                placeholder: \"Select Difficulty Level\",\n                header: \"Select Difficulty Level\",\n                options: DIFFICULTY,\n                value: difficulty,\n                onChange: (e, {\n                  value\n                }) => setDifficulty(value),\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Which type of questions do you want in your quiz?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                style: style,\n                fluid: true,\n                selection: true,\n                name: \"type\",\n                placeholder: \"Select Questions Type\",\n                header: \"Select Questions Type\",\n                options: QUESTIONS_TYPE,\n                value: questionsType,\n                onChange: (e, {\n                  value\n                }) => setQuestionsType(value),\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Please select the countdown time for your quiz.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                style: style,\n                search: true,\n                selection: true,\n                name: \"hours\",\n                placeholder: \"Select Hours\",\n                header: \"Select Hours\",\n                options: COUNTDOWN_TIME.hours,\n                value: countdownTime.hours,\n                onChange: handleTimeChange,\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                style: style,\n                search: true,\n                selection: true,\n                name: \"minutes\",\n                placeholder: \"Select Minutes\",\n                header: \"Select Minutes\",\n                options: COUNTDOWN_TIME.minutes,\n                value: countdownTime.minutes,\n                onChange: handleTimeChange,\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                style: style,\n                search: true,\n                selection: true,\n                name: \"seconds\",\n                placeholder: \"Select Seconds\",\n                header: \"Select Seconds\",\n                options: COUNTDOWN_TIME.seconds,\n                value: countdownTime.seconds,\n                onChange: handleTimeChange,\n                disabled: processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Item.Extra, {\n              style: style,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                primary: true,\n                size: \"big\",\n                icon: \"play\",\n                labelPosition: \"left\",\n                content: processing ? 'Processing...' : 'Play Now',\n                onClick: fetchData,\n                disabled: !allFieldsSelected || processing\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"qpROj8dvmhAmX7ND9Kaou5FsNBQ=\", false, function () {\n  return [useDarkMode];\n});\n_c = Main;\nMain.propTypes = {\n  startQuiz: PropTypes.func.isRequired\n};\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","PropTypes","useDarkMode","Container","Segment","Item","Dropdown","Divider","Button","Message","mindImg","CATEGORIES","NUM_OF_QUESTIONS","DIFFICULTY","QUESTIONS_TYPE","COUNTDOWN_TIME","shuffle","Offline","jsxDEV","_jsxDEV","Main","startQuiz","_s","darkMode","category","setCategory","numOfQuestions","setNumOfQuestions","difficulty","setDifficulty","questionsType","setQuestionsType","countdownTime","setCountdownTime","hours","minutes","seconds","processing","setProcessing","error","setError","offline","setOffline","style","backgroundColor","color","padding","transition","handleTimeChange","e","name","value","allFieldsSelected","fetchData","API","console","log","fetch","then","respone","json","data","setTimeout","max_questions","difficulty_level","results","filter","question","ques_type","type","sort","Math","random","slice","response_code","message","children","fileName","_jsxFileName","lineNumber","columnNumber","forEach","element","options","correct_answer","incorrect_answers","catch","navigator","onLine","Group","divided","Image","src","Content","Header","onDismiss","Meta","fluid","selection","placeholder","header","onChange","disabled","search","Extra","primary","size","icon","labelPosition","content","onClick","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["/home/rohan/Downloads/Linux Quiz App/Quiz-App/src/components/Main/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDarkMode } from '../DarkModeContext/DarkModeProvider';\r\nimport {\r\n  Container,\r\n  Segment,\r\n  Item,\r\n  Dropdown,\r\n  Divider,\r\n  Button,\r\n  Message,\r\n} from 'semantic-ui-react';\r\n\r\nimport mindImg from '../../images/mind.svg';\r\n\r\nimport {\r\n  CATEGORIES,\r\n  NUM_OF_QUESTIONS,\r\n  DIFFICULTY,\r\n  QUESTIONS_TYPE,\r\n  COUNTDOWN_TIME,\r\n} from '../../constants';\r\nimport { shuffle } from '../../utils';\r\n\r\nimport Offline from '../Offline';\r\n\r\nconst Main = ({ startQuiz }) => {\r\n  const { darkMode } = useDarkMode();\r\n  const [category, setCategory] = useState('0');\r\n  const [numOfQuestions, setNumOfQuestions] = useState(10);\r\n  const [difficulty, setDifficulty] = useState('easy');\r\n  const [questionsType, setQuestionsType] = useState('0');\r\n  const [countdownTime, setCountdownTime] = useState({\r\n    hours: 0,\r\n    minutes: 120,\r\n    seconds: 0,\r\n  });\r\n  const [processing, setProcessing] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [offline, setOffline] = useState(false);\r\n\r\n  const style = {\r\n    backgroundColor: darkMode ? '#1e1e1e' : 'white',\r\n    color: darkMode ? '#f5f5f5' : 'black',\r\n    padding: '8px',\r\n    transition: 'all 0.3s ease-in-out',\r\n  };\r\n  const handleTimeChange = (e, { name, value }) => {\r\n    setCountdownTime({ ...countdownTime, [name]: value });\r\n  };\r\n\r\n  let allFieldsSelected = false;\r\n  if (\r\n    category &&\r\n    numOfQuestions &&\r\n    difficulty &&\r\n    questionsType &&\r\n    (countdownTime.hours || countdownTime.minutes || countdownTime.seconds)\r\n  ) {\r\n    allFieldsSelected = true;\r\n  }\r\n\r\n  const fetchData = () => {\r\n    setProcessing(true);\r\n\r\n    if (error) setError(null);\r\n\r\n    const API = `http://127.0.0.5:5000/api/questions?difficulty=${difficulty}&type=${questionsType}&limit=${numOfQuestions}`;\r\n    // `https://opentdb.com/api.php?amount=${numOfQuestions}&category=${category}&difficulty=${difficulty}&type=${questionsType}`\r\n    // https://opentdb.com/api.php?amount=5&category=0&difficulty=easy&type=0\r\n    // alert(API);\r\n    console.log(API);\r\n\r\n    fetch(API)\r\n      .then(respone => respone.json())\r\n      .then(data =>\r\n        setTimeout(() => {\r\n          data = {\r\n            \"response_code\": 0,}\r\n          const max_questions = `${numOfQuestions}`;\r\n          var difficulty_level = `${difficulty}`;\r\n          if(difficulty_level!='0'){\r\n            data.results = data.results.filter(question => question.difficulty === difficulty_level);\r\n          }\r\n          var ques_type = `${questionsType}`;\r\n          if(ques_type!='0'){\r\n            data.results = data.results.filter(question => question.type === ques_type);\r\n          }\r\n          data.results = data.results.sort(() => Math.random() - 0.5).slice(0, max_questions);\r\n          // data.results = data.results.filter(question => question.difficulty === difficulty_level).sort(() => Math.random() - 0.5).slice(0, max_questions);\r\n          \r\n          // console.log(data.results);\r\n\r\n          // console.log(data[\"results\"]);\r\n          const { response_code, results } = data;\r\n\r\n          if (response_code === 1) {\r\n            const message = (\r\n              <p>\r\n                The API doesn't have enough questions for your query. (Ex.\r\n                Asking for 10 Questions in a Category that only has 10.)\r\n                <br />\r\n                <br />\r\n                Please change the <strong>No. of Questions</strong>,{' '}\r\n                <strong>Difficulty Level</strong>, or{' '}\r\n                <strong>Type of Questions</strong>.\r\n              </p>\r\n            );\r\n\r\n            setProcessing(false);\r\n            setError({ message });\r\n\r\n            return;\r\n          }\r\n\r\n          results.forEach(element => {\r\n            element.options = shuffle([\r\n              element.correct_answer,\r\n              ...element.incorrect_answers,\r\n            ]);\r\n          });\r\n\r\n          setProcessing(false);\r\n          startQuiz(\r\n            results,\r\n            countdownTime.hours + countdownTime.minutes + countdownTime.seconds\r\n          );\r\n        }, 1000)\r\n      )\r\n      .catch(error =>\r\n        setTimeout(() => {\r\n          if (!navigator.onLine) {\r\n            setOffline(true);\r\n          } else {\r\n            setProcessing(false);\r\n            setError(error);\r\n          }\r\n        }, 1000)\r\n      );\r\n  };\r\n\r\n  if (offline) return <Offline />;\r\n\r\n  return (\r\n    <Container style={style}>\r\n      <Segment style={style}>\r\n        <Item.Group divided>\r\n          <Item>\r\n            <Item.Image src={mindImg} />\r\n            <Item.Content>\r\n              <Item.Header style={style}>\r\n                <h1>The Ultimate Linux Quiz</h1>\r\n              </Item.Header>\r\n              {error && (\r\n                <Message error onDismiss={() => setError(null)}>\r\n                  <Message.Header>Error!</Message.Header>\r\n                  {error.message}\r\n                </Message>\r\n              )}\r\n              <Divider />\r\n              <Item.Meta style={style}>\r\n                <p>Click on play now to start quiz.</p>\r\n                <br />\r\n                \r\n\r\n                <p>How many questions do you want in your quiz?</p>\r\n                <Dropdown\r\n                  style={style}\r\n                  fluid\r\n                  selection\r\n                  name=\"numOfQ\"\r\n                  placeholder=\"Select No. of Questions\"\r\n                  header=\"Select No. of Questions\"\r\n                  options={NUM_OF_QUESTIONS}\r\n                  value={numOfQuestions}\r\n                  onChange={(e, { value }) => setNumOfQuestions(value)}\r\n                  disabled={processing}\r\n                />\r\n                <br />\r\n                <p>How difficult do you want your quiz to be?</p>\r\n                <Dropdown\r\n                style={style}\r\n                  fluid\r\n                  selection\r\n                  name=\"difficulty\"\r\n                  placeholder=\"Select Difficulty Level\"\r\n                  header=\"Select Difficulty Level\"\r\n                  options={DIFFICULTY}\r\n                  value={difficulty}\r\n                  onChange={(e, { value }) => setDifficulty(value)}\r\n                  disabled={processing}\r\n                />\r\n                <br />\r\n                <p>Which type of questions do you want in your quiz?</p>\r\n                <Dropdown\r\n                style={style}\r\n                  fluid\r\n                  selection\r\n                  name=\"type\"\r\n                  placeholder=\"Select Questions Type\"\r\n                  header=\"Select Questions Type\"\r\n                  options={QUESTIONS_TYPE}\r\n                  value={questionsType}\r\n                  onChange={(e, { value }) => setQuestionsType(value)}\r\n                  disabled={processing}\r\n                />\r\n                <br />\r\n                {\r\n                /* <Dropdown\r\n                style={style}\r\n                  fluid\r\n                  selection\r\n                  name=\"category\"\r\n                  placeholder=\"Select Quiz Category\"\r\n                  header=\"Select Quiz Category\"\r\n                  options={CATEGORIES}\r\n                  value={category}\r\n                  onChange={(e, { value }) => setCategory(value)}\r\n                  disabled={processing}\r\n                />\r\n                <br />\r\n                <p>How many questions do you want in your quiz?</p>\r\n                <Dropdown\r\n                  style={style}\r\n                  fluid\r\n                  selection\r\n                  name=\"numOfQ\"\r\n                  placeholder=\"Select No. of Questions\"\r\n                  header=\"Select No. of Questions\"\r\n                  options={NUM_OF_QUESTIONS}\r\n                  value={numOfQuestions}\r\n                  onChange={(e, { value }) => setNumOfQuestions(value)}\r\n                  disabled={processing}\r\n                />\r\n                <br />\r\n                <p>How difficult do you want your quiz to be?</p>\r\n                <Dropdown\r\n                style={style}\r\n                  fluid\r\n                  selection\r\n                  name=\"difficulty\"\r\n                  placeholder=\"Select Difficulty Level\"\r\n                  header=\"Select Difficulty Level\"\r\n                  options={DIFFICULTY}\r\n                  value={difficulty}\r\n                  onChange={(e, { value }) => setDifficulty(value)}\r\n                  disabled={processing}\r\n                />\r\n                <br />\r\n                <p>Which type of questions do you want in your quiz?</p>\r\n                <Dropdown\r\n                style={style}\r\n                  fluid\r\n                  selection\r\n                  name=\"type\"\r\n                  placeholder=\"Select Questions Type\"\r\n                  header=\"Select Questions Type\"\r\n                  options={QUESTIONS_TYPE}\r\n                  value={questionsType}\r\n                  onChange={(e, { value }) => setQuestionsType(value)}\r\n                  disabled={processing}\r\n                />\r\n                <br /> */}\r\n                <p>Please select the countdown time for your quiz.</p>\r\n                <Dropdown\r\n                style={style}\r\n                  search\r\n                  selection\r\n                  name=\"hours\"\r\n                  placeholder=\"Select Hours\"\r\n                  header=\"Select Hours\"\r\n                  options={COUNTDOWN_TIME.hours}\r\n                  value={countdownTime.hours}\r\n                  onChange={handleTimeChange}\r\n                  disabled={processing}\r\n                />\r\n                <Dropdown\r\n                style={style}\r\n                  search\r\n                  selection\r\n                  name=\"minutes\"\r\n                  placeholder=\"Select Minutes\"\r\n                  header=\"Select Minutes\"\r\n                  options={COUNTDOWN_TIME.minutes}\r\n                  value={countdownTime.minutes}\r\n                  onChange={handleTimeChange}\r\n                  disabled={processing}\r\n                />\r\n                <Dropdown\r\n                style={style}\r\n                  search\r\n                  selection\r\n                  name=\"seconds\"\r\n                  placeholder=\"Select Seconds\"\r\n                  header=\"Select Seconds\"\r\n                  options={COUNTDOWN_TIME.seconds}\r\n                  value={countdownTime.seconds}\r\n                  onChange={handleTimeChange}\r\n                  disabled={processing}\r\n                />\r\n              </Item.Meta>\r\n              <Divider />\r\n              <Item.Extra style={style}>\r\n                <Button\r\n                  primary\r\n                  size=\"big\"\r\n                  icon=\"play\"\r\n                  labelPosition=\"left\"\r\n                  content={processing ? 'Processing...' : 'Play Now'}\r\n                  onClick={fetchData}\r\n                  disabled={!allFieldsSelected || processing}\r\n                />\r\n              </Item.Extra>\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      </Segment>\r\n      <br />\r\n    </Container>\r\n  );\r\n};\r\n\r\nMain.propTypes = {\r\n  startQuiz: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}